Pixel

Pixel is another XML framework used to integrate XML into your projects
it drops the need to load your XML structure into DOM objects and then 
populate your real entities.

The framework was designed with ease of use in mind so you can get started
as fast as possible. It's also designed to validate the loaded data to 
match your defined schema (as defined in your structures) using 
attribute, element and/or collection 

Usually your structure will look like something like that:
from pixel.xmlelement import XmlElement, element, collection, attribute
import pixel.loader

class Header(XmlElement):
    key = attribute(str)
    value = attribute(str)
    
class Body(XmlElement):
    title = element(str, True) #optional element
    text = element(str)
    
class Message(XmlElement):
    source = attribute(str)
    destination = attribute(str)
    id = attribute(int, True) #optional attribute.
    headers = collection(Header)
    body = element(Body)
    
    def send(self):
        print "Sendig message to %s" % self.destination

def main():
    message = Message()
    message.source = 'source@mail.com'
    message.destination = 'destination@mail.com'
    message.id = 100
    message.body.text = 'Message body goes here'
    message.body.title = 'Message title'
    
    header1 = Header()
    header1.key = 'server-ip'
    header1.value = '127.0.0.1'
    
    header2 = Header()
    header2.key = 'priority'
    header2.value = 'HIGH'
    
    message.headers.append(header1)
    message.headers.append(header2)
    
    xml = str(message)
    print "--- The orignial message object xml ---"
    print xml
    #load message from xml
    
    loader = pixel.loader.PixelLoader(Message)
    loaded_message = loader.load(xml)
    
    print "--- The loaded message object xml ---"
    print str(loaded_message)
    
    print "--- doing some actions ---"
    loaded_message.send()
    

if __name__ == "__main__":
    main()
